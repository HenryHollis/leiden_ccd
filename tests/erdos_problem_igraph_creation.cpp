#include <igraph/igraph.h>
#include "GraphHelper.h"
#include "Optimiser.h"
#include "LouvainOptimiser.h"
#include "ModularityVertexPartition.h"
#include "ccdModularityVertexPartition.h"
#include <cstdio>
#include <random>


using std::cout;
using std::endl;

vector<double> emat = { 0.37454012, 0.95071431, 0.73199394, 0.59865848, 0.15601864,
                        0.15599452, 0.05808361, 0.86617615, 0.60111501, 0.70807258,
                        0.02058449, 0.96990985, 0.83244264, 0.21233911, 0.18182497,
                        0.18340451, 0.30424224, 0.52475643, 0.43194502, 0.29122914,
                        0.61185289, 0.13949386, 0.29214465, 0.36636184, 0.45606998,
                        0.78517596, 0.19967378, 0.51423444, 0.59241457, 0.04645041,
                        0.60754485, 0.17052412, 0.06505159, 0.94888554, 0.96563203,
                        0.80839735, 0.30461377, 0.09767211, 0.68423303, 0.44015249,
                        0.12203823, 0.49517691, 0.03438852, 0.9093204 , 0.25877998,
                        0.66252228, 0.31171108, 0.52006802, 0.54671028, 0.18485446,
                        0.96958463, 0.77513282, 0.93949894, 0.89482735, 0.59789998,
                        0.92187424, 0.0884925 , 0.19598286, 0.04522729, 0.32533033,
                        0.38867729, 0.27134903, 0.82873751, 0.35675333, 0.28093451,
                        0.54269608, 0.14092422, 0.80219698, 0.07455064, 0.98688694,
                        0.77224477, 0.19871568, 0.00552212, 0.81546143, 0.70685734,
                        0.72900717, 0.77127035, 0.07404465, 0.35846573, 0.11586906,
                        0.86310343, 0.62329813, 0.33089802, 0.06355835, 0.31098232,
                        0.32518332, 0.72960618, 0.63755747, 0.88721274, 0.47221493,
                        0.11959425, 0.71324479, 0.76078505, 0.5612772 , 0.77096718,
                        0.4937956 , 0.52273283, 0.42754102, 0.02541913, 0.10789143,
                        0.03142919, 0.63641041, 0.31435598, 0.50857069, 0.90756647,
                        0.24929223, 0.41038292, 0.75555114, 0.22879817, 0.07697991,
                        0.28975145, 0.16122129, 0.92969765, 0.80812038, 0.63340376,
                        0.87146059, 0.80367208, 0.18657006, 0.892559  , 0.53934224,
                        0.80744016, 0.8960913 , 0.31800347, 0.11005192, 0.22793516,
                        0.42710779, 0.81801477, 0.86073058, 0.00695213, 0.5107473 ,
                        0.417411  , 0.22210781, 0.11986537, 0.33761517, 0.9429097 ,
                        0.32320293, 0.51879062, 0.70301896, 0.3636296 , 0.97178208,
                        0.96244729, 0.2517823 , 0.49724851, 0.30087831, 0.28484049,
                        0.03688695, 0.60956433, 0.50267902, 0.05147875, 0.27864646,
                        0.90826589, 0.23956189, 0.14489487, 0.48945276, 0.98565045,
                        0.24205527, 0.67213555, 0.76161962, 0.23763754, 0.72821635,
                        0.36778313, 0.63230583, 0.63352971, 0.53577468, 0.09028977,
                        0.8353025 , 0.32078006, 0.18651851, 0.04077514, 0.59089294,
                        0.67756436, 0.01658783, 0.51209306, 0.22649578, 0.64517279,
                        0.17436643, 0.69093774, 0.38673535, 0.93672999, 0.13752094};

vector<double> refmat = { 1.        , -0.92660504,  0.99832331, -0.59621204, -0.91019751,
                          0.47477778, -0.30982677,  0.75702281,  0.44129599, -0.00534183,
                          -0.84198001, -0.04100092,
        -0.92660504,  1.        , -0.94681794,  0.25056121,  0.99913813,
        -0.77088294, -0.07044538, -0.94715875, -0.0714668 ,  0.38098043,
        0.98305764,  0.41371148,
         0.99832331, -0.94681794,  1.        , -0.54874141, -0.93264553,
        0.5249259 , -0.25427143,  0.79357436,  0.38861305, -0.06321621,
        -0.87179728, -0.09876766,
        -0.59621204,  0.25056121, -0.54874141,  1.        ,  0.21016028,
        0.4235044 ,  0.94804477,  0.07321178, -0.98353211, -0.79963069,
        0.06886645, -0.77770667,
        -0.91019751,  0.99913813, -0.93264553,  0.21016028,  1.        ,
        -0.79665886, -0.11179063, -0.95965709, -0.03000226,  0.41903067,
        0.98981885,  0.45114512,
         0.47477778, -0.77088294,  0.5249259 ,  0.4235044 , -0.79665886,
        1.        ,  0.6896995 ,  0.93446851, -0.58025554, -0.88262934,
        -0.87457811, -0.89883196,
        -0.30982677, -0.07044538, -0.25427143,  0.94804477, -0.11179063,
        0.6896995 ,  1.        ,  0.38669125, -0.98993046, -0.94912441,
        -0.25209318, -0.93729033,
         0.75702281, -0.94715875,  0.79357436,  0.07321178, -0.95965709,
        0.93446851,  0.38669125,  1.        , -0.25225458, -0.65742302,
        -0.98990684, -0.68387766,
         0.44129599, -0.0714668 ,  0.38861305, -0.98353211, -0.03000226,
        -0.58025554, -0.98993046, -0.25225458,  1.        ,  0.89499147,
        0.11257201,  0.87851348,
        -0.00534183,  0.38098043, -0.06321621, -0.79963069,  0.41903067,
        -0.88262934, -0.94912441, -0.65742302,  0.89499147,  1.        ,
        0.54399874,  0.99936387,
        -0.84198001,  0.98305764, -0.87179728,  0.06886645,  0.98981885,
        -0.87457811, -0.25209318, -0.98990684,  0.11257201,  0.54399874,
        1.        ,  0.57357701,
        -0.04100092,  0.41371148, -0.09876766, -0.77770667,  0.45114512,
        -0.89883196, -0.93729033, -0.68387766,  0.87851348,  0.99936387,
        0.57357701,  1.        };


int main(void) {
    srand(42);
    igraph_t g;

    igraph_erdos_renyi_game_gnp(
            &g, 15, .2,
            false, false);
    Graph graph(&g);
    igraph_write_graph_dot(&g, stdout);

    ccdModularityVertexPartition part(&graph); //cre
//    part.setGeneSampleMatrix(emat, 12, 3);
    part.set_fine_membership(part.membership());
    part.setGeneSampleMatrix(emat, 12, 15);

    part.setRefMatrix(refmat, 12, 12);
    LouvainOptimiser o; //create optimiser o
    o.optimise_partition(&part); //optimise our ModularityVertexPartition obj

    cout << "Node\tCommunity" << endl;
    for (int i = 0; i < graph.vcount(); i++)
        cout << i << "\t" << part.membership(i) << endl;

    igraph_destroy(&g);

    return 0;
}